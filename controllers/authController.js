const passport = require('passport');
const mongoose = require('mongoose');
const Driver = mongoose.model('Driver');
const Sender = mongoose.model('Sender');
const promisify = require('es6-promisify')

exports.loginPage = (req, res) => {
    res.render('login', {
        title: '–í–æ–π—Ç–∏'
    });
}

exports.login = (req, res, next) => {
    console.log(req.session.role);
    if ( req.session.role == "driver" ) {

        passport.authenticate('local-driver', {
                
            failureRedirect: '/login',
            failureFlash: { type: 'error', message: '–ù–µ —Å–º–æ–≥–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏!' },
            successRedirect: '/driver',
            successFlash: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
        })(req, res, next);

        } else if ( req.session.role == "sender" ) {

        passport.authenticate('local-sender', {
            failureRedirect: '/login',
            failureFlash: { type: 'error', message: '–ù–µ —Å–º–æ–≥–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏!' },
            successRedirect: '/search',
            successFlash: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
        })(req, res, next);
    }
}

exports.signin = async (req, res, next) => {

    const [ driver, sender ] = await Promise.all([ 
        Driver.findOne({ phone: req.body.phone }),
        Sender.findOne({ phone: req.body.phone })
    ]);

    let user = driver || sender;   

    if (!user) {
        req.flash('error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return res.redirect('back');
    }
    
    if (driver) {

        passport.authenticate('local-driver', {
            failureRedirect: '/login',
            failureFlash: true,
            successRedirect: '/search',
            successFlash: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
        })(req, res, next);
    } else if (sender) {

        passport.authenticate('local-sender', {
            failureRedirect: '/login',
            failureFlash: true,
            successRedirect: '/search',
            successFlash: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
        })(req, res, next);
    }

}//signin

exports.logout = (req, res) => {
    req.session.destroy();
    req.logout();
    //req.flash('success', '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!üëã');
    res.redirect('/login');
    
};

exports.isLoggedIn = (req, res, next) => {
    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (req.isAuthenticated()) {
        next(); // carry on! They are logged in!
        return;
    }
    req.flash('error', '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Å–æ–≤ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
    res.redirect('/login');
};

exports.forgotPage = (req, res) => {
    res.render('forgot', {
        title: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è'
    });
}

exports.forgot =  async (req, res, next) => {
    
    let [ driver, sender ] = await Promise.all([ 
        Driver.findOne({ phone: req.body.phone }),
        Sender.findOne({ phone: req.body.phone })
    ]);

    if (!driver && !sender) {
        req.flash('error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        return res.redirect('back');
    } 
    const user = driver || sender;
    
    user.resetPasswordExpires = Date.now() + 3600000; // –≤—Ä–µ–º—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    await user.save();
    console.log(user.resetPasswordExpires);
    next();
}

exports.reset = async (req, res, next) => {
    // let user;
    console.log('reset');
    
    const [ driver, sender ] = await Promise.all([ 
        Driver.findOne({ resetPasswordExpires: { $gt: Date.now() } }),
        Sender.findOne({ resetPasswordExpires: { $gt: Date.now() } })
    ]);
    
    const user = driver || sender;

    if (!user) {
        req.flash('error', '–í–≤–µ–¥–µ–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π –ª–∏–±–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫–ª–æ!');
        return res.redirect('back');
    }
    next();
}

exports.resetPage = (req, res) => {
    res.render('reset', {
        title: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'
    });
}

exports.update = async (req, res) => {
    const [ driver, sender ] = await Promise.all([ 
        Driver.findOne({ resetPasswordExpires: { $gt: Date.now() } }),
        Sender.findOne({ resetPasswordExpires: { $gt: Date.now() } })
    ]);
    
    const user = driver || sender;

    if (!user) {
        req.flash('error', '–í–≤–µ–¥–µ–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π –ª–∏–±–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫–ª–æ!');
        return res.redirect('back');
    }

    // const setPassword = promisify(user.setPassword, user);
    // await setPassword(req.body.password);

    user.password = req.body.password;
    
    user.resetPasswordExpires = undefined;
    const userUpdated = await user.save();
    await req.login(userUpdated);
    req.flash('success', 'üíÉ –û—Ç–ª–∏—á–Ω–æ! –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω');
    res.redirect('/search');
}

exports.updateAccount = async (req, res) => {

    const updates = {
        name:  req.body.name,
        surename: req.body.surname,
        phone: req.body.phone,
        city:  req.body.city,
        photo:  req.body.photo || 'sender-ava.svg'
    };

    console.log(req.body.photo);
    
    
    const [ driver, sender ] = await Promise.all([ 
        Driver.findById({ _id : req.user._id  }),
        Sender.findById({ _id : req.user._id  })
    ]);

    const user = driver || sender;    

    const password = req.body['password'];
    let checkPass = true;
    //
    if ( password != '' ) {
        await user.comparePassword(password, function(err, response) {
            
            if (!response) {
                req.flash('error', '–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω!');
                res.redirect('back');
                return;
            }
            return;
        });

        if ( req.body['new-password'] == req.body['confirm-password'] ) {
            user.password = req.body['new-password'];
            await user.save();
            updateAcc();
        } else {
            req.flash('error', '–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!');
            res.redirect('back');
            return;
        }

    } else {
        updateAcc();
    }

    // try {
        async function  updateAcc() {  

            const userId = { _id: req.user._id};
            const setUpdates = { $set: updates };
            const additionalParams = { runValidators: true, context: 'query', upsert: true };

            if ( user.account == 'driver') {

                await Driver.findByIdAndUpdate( userId, setUpdates, additionalParams );
            } else {

                await Sender.findByIdAndUpdate( userId, setUpdates, additionalParams );
            }
        

            req.flash('success', '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–∞–≤–ª–µ–Ω!');
            res.redirect(`/${user.account}/${user.slug}`);
            return;
        }        
}